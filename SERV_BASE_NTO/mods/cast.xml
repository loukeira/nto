<?xml version="1.0" encoding="UTF-8"?>
<mod name="Mod Cast" version="1.0" author="Marcos" contact="martyx@otland.net" enabled="yes">
	<event type="logout" name="cast-log-out" event="script"><![CDATA[
		function onLogout(cid, forceLogout)
			db.executeQuery("UPDATE `players` SET `broadcasting` = 0, `viewers` = 0 WHERE `id` = " .. getPlayerGUID(cid) .. " LIMIT 1")
			return true
		end
	]]></event>
	<globalevent name="viewers" interval="15000" event="script"><![CDATA[
		function onThink(interval)
			local players = getPlayersOnline()
			for _, pid in ipairs(players) do
				local data = getPlayerCast(pid)
				if(data.status) then

					soma = 0    
					for vod,ka in pairs(getCastViewers(pid)) do
					soma = soma +1
					end

					db.executeQuery("UPDATE `players` set `viewers` = " ..soma.. " where `id` = " .. getPlayerGUID(pid) .. ";")

				end
			end

			return true
		end
	]]></globalevent>
	<talkaction words="/live;!live;/cast;!cast;!stream;/stream" event="script"><![CDATA[
		function onSay(cid, words, param, channelId)
			
 local tmp = param:explode(" ")
    if not(tmp[1]) then
        doPlayerSendCancel(cid, "Parameters needed")
        doPlayerPopupFYI(cid, "Available commands:\n\n/cast on - enables the stream\n/cast off - disables the stream\n/cast password {password} - sets a password on the stream\n/cast password off - disables the password protection\n/cast ban {name of spectator}, ex: /cast ban Viewer 1 - locks spectator IP from joining your stream\n/cast unban {name}, ex: /cast unban Viewer 1 - removes banishment lock\n/cast bans - shows banished spectators list\n/cast mute {name}, ex: /cast mute Viewer 1 - mutes selected spectator from chat\n/cast unmute {name}, , ex: /cast unmute Viewer 1 - removes mute\n/cast mutes - shows muted spectators list\n/cast show - displays the amount and nicknames of current spectators\n/cast status - displays stream status\n/cast update - refresh your stream status!")

        return true        
    end
    
    if tmp[1] == "on"  and getPlayerCast(cid).status == false then
        doPlayerSendTextMessage(cid, MESSAGE_STATUS_CONSOLE_BLUE, "Cast has started.")
        doPlayerSetCastState(cid, true)
        doPlayerSave(cid)

    elseif tmp[1] == "on"  and getPlayerCast(cid).status == true then
        return doPlayerSendTextMessage(cid, MESSAGE_STATUS_CONSOLE_BLUE, "Cast has been started!!!")

    elseif tmp[1] == "off" and getPlayerCast(cid).status == true then
        doPlayerSendTextMessage(cid, MESSAGE_STATUS_CONSOLE_BLUE, "Cast has ended.")
        doPlayerSetCastState(cid, false)
                doPlayerSave(cid)

    elseif tmp[1] == "off" and getPlayerCast(cid).status == false then
        doPlayerSendTextMessage(cid, MESSAGE_STATUS_CONSOLE_BLUE, "Cast not is online!")
        doPlayerSetCastState(cid, false)
                doPlayerSave(cid)

    elseif isInArray({"pass", "password", "p"}, tmp[1]) then
        if not(tmp[2]) then
            return doPlayerSendCancel(cid, "You need to set a password")
        end
        
        if tmp[2]:len() > 10 then
            return doPlayerSendCancel(cid, "The password is too long. (Max.: 10 letters)")
        end
        
        if tmp[2] == "off" then
            doPlayerSetCastPassword(cid, "")
            doPlayerSendTextMessage(cid, MESSAGE_STATUS_CONSOLE_BLUE, "Cast password has been removed.")
        else
            doPlayerSetCastPassword(cid, tmp[2])
            doPlayerSendTextMessage(cid, MESSAGE_STATUS_CONSOLE_BLUE, "Cast password was set to: " .. tmp[2])
        end
    elseif isInArray({"desc", "description", "d"}, tmp[1]) then
        local d = param:gsub(tmp[1]..(tmp[2] and " " or ""), "")
        
        if not(d) or d:len() == 0 then
            return doPlayerSendCancel(cid, "You need to specify a description.")
        end
        
        if d:len() > 50 then
            return doPlayerSendCancel(cid, "The description is too long. (Max.: 50 letters)")
        end
        
        doPlayerSendTextMessage(cid, MESSAGE_STATUS_CONSOLE_BLUE, "Cast description was set to: ")
        doPlayerSendTextMessage(cid, MESSAGE_STATUS_CONSOLE_BLUE, d)
        doPlayerSetCastDescription(cid, d)
    elseif tmp[1] == "ban" then
        if not(tmp[2]) then
            return doPlayerSendCancel(cid, "Specify a spectator that you want to ban.")
        end
        
        local spectator = ""..tmp[2].." "..tmp[3]..""

        if doPlayerAddCastBan(cid,spectator) then
            doPlayerSendTextMessage(cid, MESSAGE_INFO_DESCR, "Spectator '" .. spectator .. "' has been banned.")
        else
            doPlayerSendTextMessage(cid, MESSAGE_INFO_DESCR, "Spectator '" .. spectator .. "' could not be banned.")
        end
    elseif tmp[1] == "unban" then
        if not(tmp[2]) then
            return doPlayerSendCancel(cid, "Specify the person you want to unban.")
        end
         local spectator = ""..tmp[2].." "..tmp[3]..""

        if doPlayerRemoveCastBan(cid, spectator) then
            doPlayerSendTextMessage(cid, MESSAGE_INFO_DESCR, "Spectator '" .. spectator .. "' has been unbanned.")
        else
            doPlayerSendTextMessage(cid, MESSAGE_INFO_DESCR, "Spectator '" .. spectator .. "' could not be unbanned.")
        end
    elseif param == "bans" then
        local t = getCastBans(cid)
        local text = "Cast Bans:\n\n"
        for k, v in pairs(t) do
            text = text .. "*" .. v.name .. "\n"
        end 
        if text == "Cast Bans:\n\n" then
            text = text .. "No bans."
        end
        doShowTextDialog(cid, 5958, text)
    elseif tmp[1] == "mute" then
        if not(tmp[2]) then
            return doPlayerSendCancel(cid, "Specify a spectator that you want to mute.")
        end
        
         local spectator = ""..tmp[2].." "..tmp[3]..""

        if doPlayerAddCastMute(cid, spectator) then
            doPlayerSendTextMessage(cid, MESSAGE_INFO_DESCR, "Spectator '" .. spectator .. "' has been muted.")
        else
            doPlayerSendTextMessage(cid, MESSAGE_INFO_DESCR, "Spectator '" .. spectator .. "' could not be muted.")
        end
    elseif tmp[1] == "unmute" then
        if not(tmp[2]) then
            return doPlayerSendCancel(cid, "Specify the person you want to unmute.")
        end
        
        local spectator = ""..tmp[2].." "..tmp[3]..""

        if doPlayerRemoveCastMute(cid, spectator) then
            doPlayerSendTextMessage(cid, MESSAGE_INFO_DESCR, "Spectator '" .. spectator .. "' has been unmuted.")
        else
            doPlayerSendTextMessage(cid, MESSAGE_INFO_DESCR, "Spectator '" .. spectator .. "' could not be unmuted.")
        end
    elseif param == "mutes" then
        local t = getCastMutes(cid)
        local text = "Cast Mutes:\n\n"
        for k, v in pairs(t) do
            text = text .. "*" .. v.name .. "\n"
        end 
        if text == "Cast Bans:\n\n" then
            text = text .. "No mutes."
        end
        doShowTextDialog(cid, 5958, text)
    elseif param == "show" then
        local t = getCastViewers(cid)
        local text, count = "Cast Viewers:\n#Viewers: |COUNT|\n\n", 0
        for _,v in pairs(t) do
            count = count + 1
            text = text .. "*" .. v.name .."\n"
        end
        
        if text == "Cast Viewers:\n#Viewers: |COUNT|\n\n" then text = "Cast Viewers:\n\nNo viewers." end
        text = text:gsub("|COUNT|", count)
        doShowTextDialog(cid, 5958, text)
    elseif param == "status" then
        local t, c = getCastViewers(cid), getPlayerCast(cid)
        local count = 0
        for _,v in pairs(t) do count = count + 1 end
        
        doShowTextDialog(cid, 5958, "Cast Status:\n\n*Viewers:\n      " .. count .. "\n*Description:\n      "..(c.description == "" and "Not set" or c.description).."\n*Password:\n      " .. (c.password == "" and "Not set" or "Set - '"..c.password.."'"))
    elseif param == "update" then
        if getPlayerStorageValue(cid, 656544) > os.time() then
            return doPlayerSendCancel(cid, "You used this command lately. Wait: " .. (getPlayerStorageValue(cid, 656544)-os.time()) .. " sec.")
        end
        doPlayerSave(cid)
        doPlayerSendTextMessage(cid, MESSAGE_STATUS_CONSOLE_BLUE, "The cast settings have been updated.")
        doPlayerSetStorageValue(cid, 656544, os.time()+60)
    end

			return true
		end
	]]></talkaction>
</mod>
